// JS

// Pour executer le fichier : node nomFichier.js

// Un combat de boxe est grandement attendu dans le monde entier,
// le num√©ro 1, Ippo, contre le num√©ro 2, vous-m√™me. üòó

// Le combat s'effectuera en tour par tour avec un maximum de 10 rounds !

// Si vous allez jusqu'au dernier round, vous devez afficher le vainqueur et indiquer que le combat est bien termin√©.

// Vous devez ajouter la probabilit√© d'effectuer un KO (coup critique, 10% de chance)  et, dans ce cas, le combat s'arr√™te aussi.

// Ippo (IA) vous attaque √©galement √† chaque round ; il peut donc vous mettre KO ou gagner le combat √† la fin en fonction de votre stamina restante.

// [
//   {
//     id: 1,
//     name: "Ippo",
//     caract√©ristiques: { 
//       strength: 1300,  
//       defense: 900,   
//       stamina: 25000,  
//       speed: 180      
//     },
//     techniques: [ 
//       { name: "Smash", power: 1300 },             
//       { name: "Uppercut", power: 1330 },          
//       { name: "Gazelle Punch", power: 1320 },     
//       { name: "Dempsey Roll", power: 1350 }       
//     ]
//   },
//   {
//     id: 2,
//     name: "Challenger",
//     caract√©ristiques: { 
//       strength: 1250,  
//       defense: 900,    
//       stamina: 26000,  
//       speed: 190       
//     },
//     techniques: [ 
//       { name: "Jab", power: 1250 },                
//       { name: "Uppercut", power: 1280 },          
//       { name: "Crochet", power: 1265 },            
//       { name: "Encha√Ænement", power: 1290 }        
//     ]
//   }
// ];

// √âtape 2 :

// Ajouter des comp√©tences aux combattons

// -> Vous-m√™me

// Jab (force de base)
// Uppercut (force de base + 20)
// Crochet (force de base + 15)
// Encha√Ænement (lance deux coups d√©vastateurs) (force de base + 30)

// -> Ippo

// Smash (c'est un coup √† mi-chemin entre un crochet et un uppercut qui frappe le c√¥t√© du menton) (force de base)

// Uppercut (uppercut surpuissant) (force de base + 30)

// Gazelle Punch (apr√®s avoir pris une impulsion sur ses appuis, Ippo lance un uppercut d√©vastateur qui met souvent √† terre directement) (force de base + 20)

// Dempsey Roll (Ippo d√©place son torse afin de former un huit √† l'horizontale, puis il se sert de l'impulsion pour distribuer des coups puissants, rendant la riposte tr√®s difficile) (force de base + 50)

// Ippo doit lancer des techniques al√©atoirement, tout comme le Challenger.
// Les techniques n'ont pas toutes la m√™me puissance.

// Impl√©mentez tout cela selon votre propre raisonnement, vous √™tes libre pour la valeur des propri√©t√©s.

// La vitesse d√©termine qui frappe en premier.

// La stamina est d√©duite en fonction de la force de l'adversaire.

// Le coup critique est al√©atoire (probabilit√© de r√©ussir un KO).

"use strict";

class Fight {

    constructor() {
        // Initialisation du tableu contenant les caract√©ristiques de combattants
        this.fightersCharacteristics = [
            {
                id: 1,
                name: "Ippo",
                caract√©ristiques: { 
                    strength: 1300,  
                    defense: 900,   
                    stamina: 25000,  
                    speed: 180      
                },
                techniques: [ 
                    { name: "Smash", power: 1300 },             
                    { name: "Uppercut", power: 1330 },          
                    { name: "Gazelle Punch", power: 1320 },     
                    { name: "Dempsey Roll", power: 1350 }       
                ]
            },
            {
                id: 2,
                name: "Challenger",
                caract√©ristiques: { 
                strength: 1250,  
                defense: 900,    
                stamina: 26000,  
                speed: 190       
                },
                techniques: [ 
                { name: "Jab", power: 1250 },                
                { name: "Uppercut", power: 1280 },          
                { name: "Crochet", power: 1265 },            
                { name: "Encha√Ænement", power: 1290 }        
                ]
            }
        ];

        this.ippo = this.fightersCharacteristics[0];
        this.challenger = this.fightersCharacteristics[1];

        this.stopFight = false;
        this.criticalHitHappened = false;
        this.ippoMadeTheCriticalHit = false;
        this.challengerMadeTheCriticalHit = false;
        this.damageGiven = 0;
        this.winnerId = null;
        this.endReason = "points";

        this.entireFight();
    }


    // Fonction permettant de r√©cup√©rer l'ID du gagnant, et la raison de la fin du combat
    endFight(winnerId, reason = "points") {
        this.winnerId = winnerId;
        this.endReason = reason;
        this.stopFight = true;
    }



    // Fonction permmettant d'afficher le r√©sultat du combat en fonction de la cause de la fin du combat
    announceResult() {
        const ippoStamina = this.ippo.caract√©ristiques.stamina;
        const challengerStamina = this.challenger.caract√©ristiques.stamina;

        // Message fin de combat selon la raison de la fin du combat
        if (this.winnerId !== null) {
            const winner = this.fightersCharacteristics[this.winnerId].name;
            const loser  = this.fightersCharacteristics[this.winnerId === 0 ? 1 : 0].name;

            if (this.endReason === "KO") {
                console.log(`${loser} est K.O. ! ${winner} remporte le combat par K.O. !`);
            } else if (this.endReason === "critical") {
                console.log(`${loser} s'est √©teint sur un coup critique ! ${winner} gagne !`);
            };
            return;
        }

        // Message fin de match hors coup critique : qui a le plus de Stamina restante ?
        if (ippoStamina > challengerStamina) {
            console.log("Ippo remporte ce combat et devient une nouvelle fois champion du monde !");
        } else if (ippoStamina < challengerStamina) {
            console.log("Challenger devient notre nouveau champion du monde en d√©tr√¥nant Ippo, invaincu depuis 20 ans !!!");
        } else {
            console.log("Match nul !");
        }
    }



    // Premi√®re fonction appel√©e qui permet l'encha√Ænement de tout le combat
    entireFight() {
        // Message d√©but de combat
        console.log(`Ladies and Gentlemen. Bienvenue, en ce jour historique, au combat opposant le plus grand, le plus fort, le plus titr√©, je vous demande de faire un tonnerre d'applaudissements pour IIIPPOOOOOOOOO !!!!\nFace √† lui, un combattant qui n'a pas froid aux yeux et qui compte bien faire tomber notre champion en titre, j'ai nomm√© Challengerrrr !!`);
        console.log(`*** Musique d'ambiance ***`);
        console.log(`Sans plus tarder, place au combat !\n`);

        // Les 10 rounds sauf coup critique -> arr√™t pr√©matur√©
        for (let i = 0; i < 10; i++) {
            console.log(`==================== ROUND ${i + 1} ====================\n`);

            this.whoHitsFirst();

            // Permet de stopper la boucle for en cas de fin de combat pr√©matur√©
            if (this.stopFight) break;
        }

        this.announceResult();
    }



    // Permet de d√©terminer selon la vitesse de chaque combatant qui attaque en premier
    whoHitsFirst() {
        const ippoSpeed = this.ippo.caract√©ristiques.speed;
        const challengerSpeed = this.challenger.caract√©ristiques.speed;

        if (ippoSpeed > challengerSpeed) {
            console.log(`${this.ippo.name} frappe en premier, il utilise un ${this.technique(0)}\n`);
            if (this.stopFight) return;
            console.log(`${this.challenger.name} r√©pond avec un ${this.technique(1)}\n`);
        } else {
            console.log(`${this.challenger.name} frappe en premier, il utilise un ${this.technique(1)}\n`);
            if (this.stopFight) return;
            console.log(`${this.ippo.name} r√©pond avec un ${this.technique(0)}\n`);
        }
    }



    // Permet de d√©terminer le coup qui va √™tre jou√© par chaque joueur
    technique(fighter) {
        return this.sortAttacks(fighter);
    }



    // Permet d'aller r√©cup√©rer de mani√®re al√©atoire la prochaine attaque de chaque combattant
    sortAttacks(fighter) {
        const randomChance = Math.random();

        // Cr√©ation de la variable permettant d'avoir l'ID de l'adversaire et une lecture plus claire pour le prochain dev
        // Nous affectons donc √† opponentID la valeur de "fighter" et nous v√©rifions que la valeur est bien 0 ou 1, sinon nous mettons 0 par d√©faut
        let opponentId = fighter === 0 ? 1 : 0;

        // 1 chance sur 10 pour que le coup soit un coup critique
        if (randomChance < 0.1) {
            this.criticalHitHappened = true;
            if (fighter === 0) this.ippoMadeTheCriticalHit = true;
            else this.challengerMadeTheCriticalHit = true;

            this.endFight(fighter, "critical");
            return `coup critique et met ${this.fightersCharacteristics[opponentId].name} K.O ! üí¢`;
        } else {
            // Si pas de coup critique, va r√©cup√©rer une attaque al√©atoirement parmis les 4 du combattant
            const indexHit = Math.floor(Math.random() * this.fightersCharacteristics[fighter].techniques.length);

            const damage = this.damageTaken(fighter, opponentId, indexHit);
            this.damageGiven = damage;

            const oppStats = this.fightersCharacteristics[opponentId].caract√©ristiques;

            // Permet de stopper le combat si l'adversaire n'a plus de stamina
            if (oppStats.stamina <= 0) {
                this.endFight(fighter, "KO");
                return `${this.fightersCharacteristics[fighter].techniques[indexHit].name} et inflige ${damage} de d√©gats.`;
            }

            return `${this.fightersCharacteristics[fighter].techniques[indexHit].name} et inflige ${damage} de d√©gats. \nIl reste donc ${oppStats.stamina} de stamina √† ${this.fightersCharacteristics[opponentId].name} !`;
        }
    }
    



    // Permet de d√©terminer les d√©gats re√ßus
    damageTaken(fighter, opponentId, indexHit, damageGiven) {
        const power = this.fightersCharacteristics[fighter].techniques[indexHit].power;
        const def = this.fightersCharacteristics[opponentId].caract√©ristiques.defense;
        const damage = Math.max(0, power - def);
        const opp = this.fightersCharacteristics[opponentId].caract√©ristiques;
        
        opp.stamina = Math.max(0, opp.stamina - damage);

        return damage;
    }
}

// Permet d'instantier la class et donc de lancer l'exercice complet
const fight = new Fight();